(self.webpackChunk=self.webpackChunk||[]).push([[1003],{1003:function(n){n.exports='<p>The <code>externals</code> configuration option provides a way of excluding dependencies from the output bundles. Instead, the created bundle relies on that dependency to be present in the consumer\'s (any end-user application) environment. This feature is typically most useful to <strong>library developers</strong>, however there are a variety of applications for it.</p> <h2 id="externals"><code>externals</code><a href="#externals" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code> <code>object</code> <code>function</code> <code>RegExp</code></p> <p><strong>Prevent bundling</strong> of certain <code>import</code>ed packages and instead retrieve these <em>external dependencies</em> at runtime.</p> <p>For example, to include <a href="https://jquery.com/">jQuery</a> from a CDN instead of bundling it:</p> <p><strong>index.html</strong></p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span>\n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.0.js<span class="token punctuation">"</span></span>\n  <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk=<span class="token punctuation">"</span></span>\n  <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    jquery<span class="token operator">:</span> <span class="token string">\'jQuery\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>This leaves any dependent modules unchanged, i.e. the code shown below will still work:</p> <pre><code class="hljs language-javascript"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">\'jquery\'</span><span class="token punctuation">;</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">\'.my-element\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The bundle with external dependencies can be used in various module contexts, such as <a href="/concepts/modules">CommonJS, AMD, global and ES2015 modules</a>. The external library may be available in any of these forms:</p> <ul> <li><strong>root</strong>: The library should be available as a global variable (e.g. via a script tag).</li> <li><strong>commonjs</strong>: The library should be available as a CommonJS module.</li> <li><strong>commonjs2</strong>: Similar to the above but where the export is <code>module.exports.default</code>.</li> <li><strong>amd</strong>: Similar to <code>commonjs</code> but using AMD module system.</li> </ul> <p>The following syntaxes are accepted...</p> <h3 id="string">string<a href="#string" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>See the example above. The property name <code>jquery</code> indicates that the module <code>jquery</code> in <code>import $ from \'jquery\'</code> should be excluded. In order to replace this module, the value <code>jQuery</code> will be used to retrieve a global <code>jQuery</code> variable. In other words, when a string is provided it will be treated as <code>root</code> (defined above and below).</p> <p>On the other hand, if you want to externalise a library that is available as a CommonJS module, you can provide the external library type together with the library name.</p> <p>For example, if you want to exclude <code>fs-extra</code> from the output bundle and import it during the runtime instead, you can specify it as follows:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">\'fs-extra\'</span><span class="token operator">:</span> <span class="token string">\'commonjs2 fs-extra\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>This leaves any dependent modules unchanged, i.e. the code shown below:</p> <pre><code class="hljs language-javascript"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">\'fs-extra\'</span><span class="token punctuation">;</span></code></pre> <p>will compile to something like:</p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'fs-extra\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="string-1"><code>[string]</code><a href="#string-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    subtract<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>subtract: [\'./math\', \'subtract\']</code> allows you select part of a commonjs module, where <code>./math</code> is the module and your bundle only requires the subset under the <code>subtract</code> variable. This example would translate to <code>require(\'./math\').subtract;</code></p> <h3 id="object">object<a href="#object" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <blockquote class="warning"> <p>An object with <code>{ root, amd, commonjs, ... }</code> is only allowed for <a href="/configuration/output/#outputlibrarytarget"><code>libraryTarget: \'umd\'</code></a>. It\'s not allowed for other library targets.</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals <span class="token operator">:</span> <span class="token punctuation">{</span>\n    react<span class="token operator">:</span> <span class="token string">\'react\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// or</span>\n\n  externals <span class="token operator">:</span> <span class="token punctuation">{</span>\n    lodash <span class="token operator">:</span> <span class="token punctuation">{</span>\n      commonjs<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      amd<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      root<span class="token operator">:</span> <span class="token string">\'_\'</span> <span class="token comment">// indicates global variable</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// or</span>\n\n  externals <span class="token operator">:</span> <span class="token punctuation">{</span>\n    subtract <span class="token operator">:</span> <span class="token punctuation">{</span>\n      root<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>This syntax is used to describe all the possible ways that an external library can be made available. <code>lodash</code> here is available as <code>lodash</code> under AMD and CommonJS module systems but available as <code>_</code> in a global variable form. <code>subtract</code> here is available via the property <code>subtract</code> under the global <code>math</code> object (e.g. <code>window[\'math\'][\'subtract\']</code>).</p> <h3 id="function">function<a href="#function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function ({ context, request }, callback)</code></p> <p>It might be useful to define your own function to control the behavior of what you want to externalize from webpack. <a href="https://www.npmjs.com/package/webpack-node-externals">webpack-node-externals</a>, for example, excludes all modules from the <code>node_modules</code> directory and provides options to whitelist packages.</p> <p>The function receives two arguments:</p> <ul> <li><code>ctx</code> (<code>object</code>): Object containing details of the file. <ul> <li><code>ctx.context</code> (<code>string</code>): The directory of the file which contains the import.</li> <li><code>ctx.request</code> (<code>string</code>): The import path being requested.</li> </ul> </li> <li><code>callback</code> (<code>function (err, result, type)</code>): Callback function used to indicate how the module should be externalized.</li> </ul> <p>The callback function takes three arguments:</p> <ul> <li><code>err</code> (<code>Error</code>): Used to indicate if there has been an error while externalizing the import. If there is an error, this should be the only parameter used.</li> <li><code>result</code> (<code>string</code> <code>[string]</code> <code>object</code>): Describes the external module. Can accept a string in the format <code>${type} ${path}</code>, or one of the other standard external formats (<a href="#string"><code>string</code></a>, <a href="#string-1"><code>[string]</code></a>, or <a href="#object"><code>object</code></a>)</li> <li><code>type</code> (<code>string</code>): Optional parameter that indicates the module type (if it has not already been indicated in the <code>result</code> parameter).</li> </ul> <p>As an example, to externalize all imports where the import path matches a regular expression you could do the following:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> request <span class="token punctuation">}</span><span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^yourregex$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// Externalize to a commonjs module using the request path</span>\n        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// Continue without externalizing the import</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Other examples using different module formats:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The external is a `commonjs2` module located in `@scope/library`</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'@scope/library\'</span><span class="token punctuation">,</span> <span class="token string">\'commonjs2\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The external is a global variable called `nameOfGlobal`.</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'nameOfGlobal\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The external is a named export in the `@scope/library` module.</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">\'@scope/library\'</span><span class="token punctuation">,</span> <span class="token string">\'namedexport\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\'commonjs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The external is a UMD module</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        root<span class="token operator">:</span> <span class="token string">\'componentsGlobal\'</span><span class="token punctuation">,</span>\n        commonjs<span class="token operator">:</span> <span class="token string">\'@scope/components\'</span><span class="token punctuation">,</span>\n        commonjs2<span class="token operator">:</span> <span class="token string">\'@scope/components\'</span><span class="token punctuation">,</span>\n        amd<span class="token operator">:</span> <span class="token string">\'components\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="regexp">RegExp<a href="#regexp" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Every dependency that matches the given regular expression will be excluded from the output bundles.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token regex">/^(jquery|\\$)$/i</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>In this case, any dependency named <code>jQuery</code>, capitalized or not, or <code>$</code> would be externalized.</p> <h3 id="combining-syntaxes">Combining syntaxes<a href="#combining-syntaxes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>Sometimes you may want to use a combination of the above syntaxes. This can be done in the following manner:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// String</span>\n      react<span class="token operator">:</span> <span class="token string">\'react\'</span><span class="token punctuation">,</span>\n      <span class="token comment">// Object</span>\n      lodash <span class="token operator">:</span> <span class="token punctuation">{</span>\n        commonjs<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n        amd<span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n        root<span class="token operator">:</span> <span class="token string">\'_\'</span> <span class="token comment">// indicates global variable</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// [string]</span>\n      subtract<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./math\'</span><span class="token punctuation">,</span> <span class="token string">\'subtract\'</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// Function</span>\n    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> context<span class="token punctuation">,</span> request <span class="token punctuation">}</span><span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/^yourregex$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">\'commonjs \'</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// Regex</span>\n    <span class="token operator">/</span><span class="token operator">^</span><span class="token punctuation">(</span>jquery<span class="token operator">|</span>\\$<span class="token punctuation">)</span>$<span class="token operator">/</span>i\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p><a href="/configuration/externals/#externalstype">Default type</a> will be used if you specify <code>externals</code> without a type e.g. <code>externals: { react: \'react\' }</code> instead of <code>externals: { react: \'commonjs-module react\' }</code>.</p> </blockquote> <p>For more information on how to use this configuration, please refer to the article on <a href="/guides/author-libraries">how to author a library</a>.</p> <h2 id="externalstype"><code>externalsType</code><a href="#externalstype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'var\'</code></p> <p>Specifies the default type of externals. <code>amd</code>, <code>umd</code>, <code>system</code> and <code>jsonp</code> externals <strong>depend on the <a href="/configuration/output/#outputlibrarytarget"><code>output.libraryTarget</code></a></strong> being set to the same value e.g. you can only consume <code>amd</code> externals within an <code>amd</code> library.</p> <p>Supported types:</p> <ul> <li><code>\'var\'</code></li> <li><code>\'module\'</code></li> <li><code>\'assign\'</code></li> <li><code>\'this\'</code></li> <li><code>\'window\'</code></li> <li><code>\'self\'</code></li> <li><code>\'global\'</code></li> <li><code>\'commonjs\'</code></li> <li><code>\'commonjs-module\'</code></li> <li><code>\'amd\'</code></li> <li><code>\'amd-require\'</code></li> <li><code>\'umd\'</code></li> <li><code>\'umd2\'</code></li> <li><code>\'jsonp\'</code></li> <li><code>\'system\'</code></li> <li><code>\'promise\'</code> - same as <code>\'var\'</code> but awaits the result (async module)</li> <li><code>\'import\'</code> - uses <code>import()</code> to load a native EcmaScript module (async module)</li> <li><code>\'script\'</code> - load script exposing predefined global variables with HTML <code>&#x3C;script></code> element</li> </ul> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externalsType<span class="token operator">:</span> <span class="token string">\'promise\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="script"><code>script</code><a href="#script" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>External script can be loaded from any URL when <a href="#externalstype"><code>externalsType</code></a> is set to <code>\'script\'</code>. The <code>&#x3C;script></code> tag would be removed after the script has been loaded.</p> <h4 id="syntax">Syntax<a href="#syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    packageName<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'http://example.com/script.js\'</span><span class="token punctuation">,</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span> <span class="token string">\'property\'</span><span class="token punctuation">,</span> <span class="token string">\'property\'</span><span class="token punctuation">]</span> <span class="token comment">// properties are optional</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>You can also use the shortcut syntax if you\'re not going to specify any properties:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    packageName<span class="token operator">:</span> <span class="token string">\'global@http://example.com/script.js\'</span> <span class="token comment">// no properties here</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p><a href="/configuration/output/#outputpublicpath"><code>output.publicPath</code></a> won\'t be added to the provided URL.</p> </blockquote> <h4 id="example">Example<a href="#example" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>Let\'s load a <code>lodash</code> from CDN:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externalsType<span class="token operator">:</span> <span class="token string">\'script\'</span><span class="token punctuation">,</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lodash<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'https://cdn.jsdelivr.net/npm/lodash@4.17.19/lodash.min.js\'</span><span class="token punctuation">,</span> <span class="token string">\'_\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Then use it in code:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>Here\'s how we specify properties for the above example:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externalsType<span class="token operator">:</span> <span class="token string">\'script\'</span><span class="token punctuation">,</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    lodash<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'https://cdn.jsdelivr.net/npm/lodash@4.17.19/lodash.min.js\'</span><span class="token punctuation">,</span> <span class="token string">\'_\'</span><span class="token punctuation">,</span> <span class="token string">\'head\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Both local variable <code>head</code> and global <code>window._</code> will be exposed when you <code>import</code> <code>lodash</code>:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> head <span class="token keyword">from</span> <span class="token string">\'lodash\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs 1 here</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>_<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'a\'</span><span class="token punctuation">,</span> <span class="token string">\'b\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs a here</span></code></pre> <blockquote class="tip"> <p>When loading code with HTML <code>&#x3C;script></code> tags, the webpack runtime will try to find an existing <code>&#x3C;script></code> tag that matches the <code>src</code> attribute or has a specific <code>data-webpack</code> attribute. For chunk loading <code>data-webpack</code> attribute would have value of <code>\'[output.uniqueName]:chunk-[chunkId]\'</code> while external script has value of <code>\'[output.uniqueName]:[global]\'</code>.</p> </blockquote> <blockquote class="tip"> <p>Options like <code>output.chunkLoadTimeout</code>, <code>output.crossOriginLoading</code> and <code>output.scriptType</code> will also have effect on the external scripts loaded this way.</p> </blockquote> <h2 id="externalspresets"><code>externalsPresets</code><a href="#externalspresets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>Enable presets of externals for specific targets.</p> <blockquote class="warning"> <p>In earlier webpack versions, the following functionality was achieved by using <a href="/configuration/target/"><code>target</code></a>.</p> </blockquote> <table> <thead> <tr> <th>Option</th> <th>Description</th> <th>Input Type</th> </tr> </thead> <tbody> <tr> <td data-th="Option"><span><code>electron</code></span></td> <td data-th="Description"><span>Treat common electron built-in modules in main and preload context like <code>electron</code>, <code>ipc</code> or <code>shell</code> as external and load them via <code>require()</code> when used.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> <tr> <td data-th="Option"><span><code>electronMain</code></span></td> <td data-th="Description"><span>Treat electron built-in modules in the main context like <code>app</code>, <code>ipc-main</code> or <code>shell</code> as external and load them via <code>require()</code> when used.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> <tr> <td data-th="Option"><span><code>electronPreload</code></span></td> <td data-th="Description"><span>Treat electron built-in modules in the preload context like <code>web-frame</code>, <code>ipc-renderer</code> or <code>shell</code> as external and load them via require() when used.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> <tr> <td data-th="Option"><span><code>electronRenderer</code></span></td> <td data-th="Description"><span>Treat electron built-in modules in the renderer context like <code>web-frame</code>, <code>ipc-renderer</code> or <code>shell</code> as external and load them via <code>require()</code> when used.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> <tr> <td data-th="Option"><span><code>node</code></span></td> <td data-th="Description"><span>Treat node.js built-in modules like <code>fs</code>, <code>path</code> or <code>vm</code> as external and load them via <code>require()</code> when used.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> <tr> <td data-th="Option"><span><code>nwjs</code></span></td> <td data-th="Description"><span>Treat <code>NW.js</code> legacy <code>nw.gui</code> module as external and load it via <code>require()</code> when used.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> <tr> <td data-th="Option"><span><code>web</code></span></td> <td data-th="Description"><span>Treat references to <code>http(s)://...</code> and <code>std:...</code> as external and load them via <code>import</code> when used. <strong>(Note that this changes execution order as externals are executed before any other code in the chunk)</strong>.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> <tr> <td data-th="Option"><span><code>webAsync</code></span></td> <td data-th="Description"><span>Treat references to \'http(s)://...\' and \'std:...\' as external and load them via <code>async import()</code> when used <strong>(Note that this external type is an <code>async</code> module, which has various effects on the execution)</strong>.</span></td> <td data-th="Input Type"><span>boolean</span></td> </tr> </tbody> </table> <p><strong>Example</strong></p> <p>Using <code>node</code> preset will not bundle built-in modules and treats them as external and loads them via <code>require()</code> when used.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  externalsPresets<span class="token operator">:</span><span class="token punctuation">{</span>\n    node<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> '}}]);