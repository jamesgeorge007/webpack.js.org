(self.webpackChunk=self.webpackChunk||[]).push([[6446],{6446:function(n){n.exports='<p>Since version 4 webpack runs optimizations for you depending on the chosen <a href="/configuration/mode/"><code>mode</code></a>, still all optimizations are available for manual configuration and overrides.</p> <h2 id="optimizationminimize"><code>optimization.minimize</code><a href="#optimizationminimize" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Tell webpack to minimize the bundle using the <a href="/plugins/terser-webpack-plugin/">TerserPlugin</a> or the plugin(s) specified in <a href="#optimizationminimizer"><code>optimization.minimizer</code></a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimize<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> Learn how <a href="/configuration/mode/">mode</a> works. </blockquote> <h2 id="optimizationminimizer"><code>optimization.minimizer</code><a href="#optimizationminimizer" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[TerserPlugin]</code> and or <code>[function (compiler)]</code></p> <p>Allows you to override the default minimizer by providing a different one or more customized <a href="/plugins/terser-webpack-plugin/">TerserPlugin</a> instances.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'terser-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        cache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        parallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        sourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Must be set to true if using source-maps in production</span>\n        terserOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token comment">// https://github.com/webpack-contrib/terser-webpack-plugin#terseroptions</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Or, as function:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> TerserPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'terser-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">/* your config */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>\'...\'</code> can be used in <code>optimization.minimizer</code> to access the defaults.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    minimizer<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CssMinimizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'...\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationsplitchunks"><code>optimization.splitChunks</code><a href="#optimizationsplitchunks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>By default webpack v4+ provides new common chunks strategies out of the box for dynamically imported modules. See available options for configuring this behavior in the <a href="/plugins/split-chunks-plugin/">SplitChunksPlugin</a> page.</p> <h2 id="optimizationruntimechunk"><code>optimization.runtimeChunk</code><a href="#optimizationruntimechunk" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code> <code>string</code> <code>boolean</code></p> <p>Setting <code>optimization.runtimeChunk</code> to <code>true</code> or <code>\'multiple\'</code> adds an additional chunk containing only the runtime to each entrypoint. This setting is an alias for:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token parameter">entrypoint</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">runtime~</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entrypoint<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The value <code>\'single\'</code> instead creates a runtime file to be shared for all generated chunks. This setting is an alias for:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token operator">:</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">\'runtime\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>By setting <code>optimization.runtimeChunk</code> to <code>object</code> it is only possible to provide the <code>name</code> property which stands for the name or name factory for the runtime chunks.</p> <p>Default is <code>false</code>: each entry chunk embeds runtime.</p> <blockquote class="warning"> W> Imported modules are initialized for each runtime chunk separately, so if you include multiple entry points on a page, beware of this behavior. You will probably want to set it to <code>single</code> or use another configuration that allows you to only have one runtime instance. </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    runtimeChunk<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token parameter">entrypoint</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">runtimechunk~</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>entrypoint<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationemitonerrors"><code>optimization.emitOnErrors</code><a href="#optimizationemitonerrors" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>Use the <code>optimization.emitOnErrors</code> to emit assets whenever there are errors while compiling. This ensures that erroring assets are emitted. Critical errors are emitted into the generated code and will cause errors at runtime.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    emitOnErrors<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> W> If you are using webpack <a href="/api/cli/">CLI</a> , the webpack process will not exit with an error code while this plugin is enabled. If you want webpack to "fail" when using the CLI, please check out the <a href="/api/cli/#advanced-options"><code>bail</code> option</a> . </blockquote> <h2 id="optimizationmoduleids"><code>optimization.moduleIds</code><a href="#optimizationmoduleids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string: \'natural\' | \'named\' | \'deterministic\' | \'size\'</code></p> <p>Tells webpack which algorithm to use when choosing module ids. Setting <code>optimization.moduleIds</code> to <code>false</code> tells webpack that none of built-in algorithms should be used, as custom one can be provided via plugin. By default <code>optimization.moduleIds</code> is set to <code>false</code>.</p> <p>The following string values are supported:</p> <table> <thead> <tr> <th>Option</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>natural</code></p><p class="description mobile">Numeric ids in order of usage.</p><p></p></div></td> <td class="description desktop">Numeric ids in order of usage.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>named</code></p><p class="description mobile">Readable ids for better debugging.</p><p></p></div></td> <td class="description desktop">Readable ids for better debugging.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>deterministic</code></p><p class="description mobile">Module names are hashed into small numeric values.</p><p></p></div></td> <td class="description desktop">Module names are hashed into small numeric values.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>size</code></p><p class="description mobile">Numeric ids focused on minimal initial download size.</p><p></p></div></td> <td class="description desktop">Numeric ids focused on minimal initial download size.</td> </tr> </tbody> </table> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    moduleIds<span class="token operator">:</span> <span class="token string">\'deterministic\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>deterministic</code> option is useful for long term caching, but still results in smaller bundles compared to <code>hashed</code>. Length of the numeric value is chosen to fill a maximum of 80% of the id space. By default a minimum length of 3 digits is used when <code>optimization.moduleIds</code> is set to <code>deterministic</code>. To override the default behaviour set <code>optimization.moduleIds</code> to <code>false</code> and use the <code>webpack.ids.DeterministicModuleIdsPlugin</code>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    moduleIds<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ids<span class="token punctuation">.</span>DeterministicModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      maxLength<span class="token operator">:</span> <span class="token number">5</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> W> <code>moduleIds: \'deterministic\'</code> was added in webpack 5 and <code>moduleIds: \'hashed\'</code> is deprecated in favor of it. </blockquote> <blockquote class="warning"> W> <code>moduleIds: total-size</code> has been removed in webpack 5. </blockquote> <h2 id="optimizationchunkids"><code>optimization.chunkIds</code><a href="#optimizationchunkids" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string: \'natural\' | \'named\' | \'size\' | \'total-size\' | \'deterministic\' </code></p> <p>Tells webpack which algorithm to use when choosing chunk ids. Setting <code>optimization.chunkIds</code> to <code>false</code> tells webpack that none of built-in algorithms should be used, as custom one can be provided via plugin. There are couple of defaults for <code>optimization.chunkIds</code>:</p> <ul> <li>Also if the environment is development then <code>optimization.chunkIds</code> is set to <code>\'named\'</code>, while in production it is set to <code>\'deterministic\'</code></li> <li>if none of the above, <code>optimization.chunkIds</code> will be defaulted to <code>\'natural\'</code></li> </ul> <p>The following string values are supported:</p> <table> <thead> <tr> <th>Option</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>\'natural\'</code></p><p class="description mobile">Numeric ids in order of usage.</p><p></p></div></td> <td class="description desktop">Numeric ids in order of usage.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>\'named\'</code></p><p class="description mobile">Readable ids for better debugging.</p><p></p></div></td> <td class="description desktop">Readable ids for better debugging.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>\'deterministic\'</code></p><p class="description mobile">Short numeric ids which will not be changing between compilation. Good for long term caching. Enabled by default for production mode.</p><p></p></div></td> <td class="description desktop">Short numeric ids which will not be changing between compilation. Good for long term caching. Enabled by default for production mode.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>\'size\'</code></p><p class="description mobile">Numeric ids focused on minimal initial download size.</p><p></p></div></td> <td class="description desktop">Numeric ids focused on minimal initial download size.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>\'total-size\'</code></p><p class="description mobile">numeric ids focused on minimal total download size.</p><p></p></div></td> <td class="description desktop">numeric ids focused on minimal total download size.</td> </tr> </tbody> </table> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    chunkIds<span class="token operator">:</span> <span class="token string">\'named\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>By default, a minimum length of 3 digits is used when <code>optimization.chunkIds</code> is set to <code>\'deterministic\'</code>. To override the default behaviour, set <code>optimization.chunkIds</code> to <code>false</code> and use the <code>webpack.ids.DeterministicChunkIdsPlugin</code>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    chunkIds<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ids<span class="token punctuation">.</span>DeterministicChunkIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      maxLength<span class="token operator">:</span> <span class="token number">5</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationnodeenv"><code>optimization.nodeEnv</code><a href="#optimizationnodeenv" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string</code></p> <p>Tells webpack to set <code>process.env.NODE_ENV</code> to a given string value. <code>optimization.nodeEnv</code> uses <a href="/plugins/define-plugin/">DefinePlugin</a> unless set to <code>false</code>. <code>optimization.nodeEnv</code> <strong>defaults</strong> to <a href="/configuration/mode/">mode</a> if set, else falls back to <code>\'production\'</code>.</p> <p>Possible values:</p> <ul> <li>any string: the value to set <code>process.env.NODE_ENV</code> to.</li> <li>false: do not modify/set the value of <code>process.env.NODE_ENV</code>.</li> </ul> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    nodeEnv<span class="token operator">:</span> <span class="token string">\'production\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> When <a href="/configuration/mode/">mode</a> is set to <code>\'none\'</code> , <code>optimization.nodeEnv</code> defaults to <code>false</code> . </blockquote> <h2 id="optimizationmanglewasmimports"><code>optimization.mangleWasmImports</code><a href="#optimizationmanglewasmimports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>When set to <code>true</code> tells webpack to reduce the size of WASM by changing imports to shorter strings. It mangles module and export names.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mangleWasmImports<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationremoveavailablemodules"><code>optimization.removeAvailableModules</code><a href="#optimizationremoveavailablemodules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>Tells webpack to detect and remove modules from chunks when these modules are already included in all parents. Setting <code>optimization.removeAvailableModules</code> to <code>true</code> will enable this optimization. Enabled by default in <a href="/configuration/mode/"><code>production</code> mode</a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    removeAvailableModules<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> W> <code>optimization.removeAvailableModules</code> reduces the performance of webpack, and will be disabled in <code>production</code> mode by default in next major release. Disable it in <code>production</code> mode if you want extra build performance. </blockquote> <h2 id="optimizationremoveemptychunks"><code>optimization.removeEmptyChunks</code><a href="#optimizationremoveemptychunks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Tells webpack to detect and remove chunks which are empty. Setting <code>optimization.removeEmptyChunks</code> to <code>false</code> will disable this optimization.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    removeEmptyChunks<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationmergeduplicatechunks"><code>optimization.mergeDuplicateChunks</code><a href="#optimizationmergeduplicatechunks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Tells webpack to merge chunks which contain the same modules. Setting <code>optimization.mergeDuplicateChunks</code> to <code>false</code> will disable this optimization.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mergeDuplicateChunks<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationflagincludedchunks"><code>optimization.flagIncludedChunks</code><a href="#optimizationflagincludedchunks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>Tells webpack to determine and flag chunks which are subsets of other chunks in a way that subsets don’t have to be loaded when the bigger chunk has been already loaded. By default <code>optimization.flagIncludedChunks</code> is enabled in <code>production</code> <a href="/configuration/mode/">mode</a> and disabled elsewise.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    flagIncludedChunks<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationoccurrenceorder"><code>optimization.occurrenceOrder</code><a href="#optimizationoccurrenceorder" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>Tells webpack to figure out an order of modules which will result in the smallest initial bundle. By default <code>optimization.occurrenceOrder</code> is enabled in <code>production</code> <a href="/configuration/mode/">mode</a> and disabled elsewise.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    occurrenceOrder<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationprovidedexports"><code>optimization.providedExports</code><a href="#optimizationprovidedexports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>Tells webpack to figure out which exports are provided by modules to generate more efficient code for <code>export * from ...</code>. By default <code>optimization.providedExports</code> is enabled.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    providedExports<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationusedexports"><code>optimization.usedExports</code><a href="#optimizationusedexports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code> <code>string: \'global\'</code></p> <p>Tells webpack to determine used exports for each module. This depends on <a href="#optimizationoccurrenceorder"><code>optimization.providedExports</code></a>. Information collected by <code>optimization.usedExports</code> is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible. Dead code elimination in minimizers will benefit from this and can remove unused exports.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    usedExports<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>To opt-out from used exports analysis per runtime:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    usedExports<span class="token operator">:</span> <span class="token string">\'global\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationconcatenatemodules"><code>optimization.concatenateModules</code><a href="#optimizationconcatenatemodules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>Tells webpack to find segments of the module graph which can be safely concatenated into a single module. Depends on <a href="#optimizationprovidedexports"><code>optimization.providedExports</code></a> and <a href="#optimizationusedexports"><code>optimization.usedExports</code></a>. By default <code>optimization.concatenateModules</code> is enabled in <code>production</code> <a href="/configuration/mode/">mode</a> and disabled elsewise.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    concatenateModules<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationsideeffects"><code>optimization.sideEffects</code><a href="#optimizationsideeffects" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code> <code>string: \'flag\'</code></p> <p>Tells webpack to recognise the <a href="https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md"><code>sideEffects</code></a> flag in <code>package.json</code> or rules to skip over modules which are flagged to contain no side effects when exports are not used.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"awesome npm module"</span><span class="token punctuation">,</span>\n  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>\n  <span class="token property">"sideEffects"</span><span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span></code></pre> <blockquote class="tip"> Please note that <code>sideEffects</code> should be in the npm module\'s <code>package.json</code> file and doesn\'t mean that you need to set <code>sideEffects</code> to <code>false</code> in your own project\'s <code>package.json</code> which requires that big module. </blockquote> <p><code>optimization.sideEffects</code> depends on <a href="#optimizationprovidedexports"><code>optimization.providedExports</code></a> to be enabled. This dependency has a build time cost, but eliminating modules has positive impact on performance because of less code generation. Effect of this optimization depends on your codebase, try it for possible performance wins.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    sideEffects<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>To only use the manual flag and do not analyse source code:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    sideEffects<span class="token operator">:</span> <span class="token string">\'flag\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The <code>\'flag\'</code> value is used by default in non-production builds.</p> <h2 id="optimizationportablerecords"><code>optimization.portableRecords</code><a href="#optimizationportablerecords" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p><code>optimization.portableRecords</code> tells webpack to generate records with relative paths to be able to move the context folder.</p> <p>By default <code>optimization.portableRecords</code> is disabled. Automatically enabled if at least one of the records options provided to webpack config: <a href="/configuration/other-options/#recordspath"><code>recordsPath</code></a>, <a href="/configuration/other-options/#recordsinputpath"><code>recordsInputPath</code></a>, <a href="/configuration/other-options/#recordsoutputpath"><code>recordsOutputPath</code></a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    portableRecords<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationmangleexports"><code>optimization.mangleExports</code><a href="#optimizationmangleexports" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code> <code>string: \'deterministic\' | \'size\'</code></p> <p><code>optimization.mangleExports</code> allows to control export mangling.</p> <p>By default <code>optimization.mangleExports: \'deterministic\'</code> is enabled in <code>production</code> <a href="/configuration/mode/">mode</a> and disabled elsewise.</p> <p>The following values are supported:</p> <table> <thead> <tr> <th>Option</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>\'size\'</code></p><p class="description mobile">Short names - usually a single char - focused on minimal download size.</p><p></p></div></td> <td class="description desktop">Short names - usually a single char - focused on minimal download size.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>\'deterministic\'</code></p><p class="description mobile">Short names - usually two chars - which will not change when adding or removing exports. Good for long term caching.</p><p></p></div></td> <td class="description desktop">Short names - usually two chars - which will not change when adding or removing exports. Good for long term caching.</td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>true</code></p><p class="description mobile">Same as <code>\'deterministic\'</code></p><p></p></div></td> <td class="description desktop">Same as <code>\'deterministic\'</code></td> </tr> <tr> <td><div class="title"><p>Option</p><p>Description</p></div><div class="content"><p><code>false</code></p><p class="description mobile">Keep original name. Good for readablility and debugging.</p><p></p></div></td> <td class="description desktop">Keep original name. Good for readablility and debugging.</td> </tr> </tbody> </table> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mangleExports<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationinnergraph"><code>optimization.innerGraph</code><a href="#optimizationinnergraph" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p><code>optimization.innerGraph</code> tells webpack whether to conduct inner graph analysis for unused exports.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    innerGraph<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="optimizationrealcontenthash"><code>optimization.realContentHash</code><a href="#optimizationrealcontenthash" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Adds an additional hash compilation pass after the assets have been processed to get the correct asset content hashes. If <code>realContentHash</code> is set to <code>false</code>, internal data is used to calculate the hash and it can change when assets are identical.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  optimization<span class="token operator">:</span> <span class="token punctuation">{</span>\n    realContentHash<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> '}}]);