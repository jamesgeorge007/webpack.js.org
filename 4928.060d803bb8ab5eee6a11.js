(self.webpackChunk=self.webpackChunk||[]).push([[4928],{4928:function(n){n.exports='<p>Besides exporting a single configuration object, there are a few more ways that cover other needs as well.</p> <h2 id="exporting-a-function">Exporting a Function<a href="#exporting-a-function" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Eventually you will find the need to disambiguate in your <code>webpack.config.js</code> between <a href="/guides/development">development</a> and <a href="/guides/production">production builds</a>. You have (at least) two options:</p> <p>One option is to export a function from your webpack configuration instead of exporting an object. The function will be invoked with two arguments:</p> <ul> <li>An environment as the first parameter. See the <a href="/api/cli/#environment-options">environment options CLI documentation</a> for syntax examples.</li> <li>An options map (<code>argv</code>) as the second parameter. This describes the options passed to webpack, with keys such as <a href="/api/cli/#output-options"><code>output-filename</code></a> and <a href="/api/cli/#optimize-options"><code>optimize-minimize</code></a>.</li> </ul> <pre><code class="hljs language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">module.exports = {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">module.exports = function(env, argv) {\n</span><span class="token prefix inserted">+</span><span class="token line">  return {\n</span><span class="token prefix inserted">+</span><span class="token line">    mode: env.production ? \'production\' : \'development\',\n</span><span class="token prefix inserted">+</span><span class="token line">    devtool: env.production ? \'source-map\' : \'eval\',\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    plugins: [\n</span><span class="token prefix unchanged"> </span><span class="token line">      new TerserPlugin({\n</span><span class="token prefix unchanged"> </span><span class="token line">        terserOptions: {\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">          compress: argv[\'optimize-minimize\'] // only if -p or --optimize-minimize were passed\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        }\n</span><span class="token prefix unchanged"> </span><span class="token line">      })\n</span><span class="token prefix unchanged"> </span><span class="token line">    ]\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  };\n</span></span>};</code></pre> <h2 id="exporting-a-promise">Exporting a Promise<a href="#exporting-a-promise" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>webpack will run the function exported by the configuration file and wait for a Promise to be returned. Handy when you need to asynchronously load configuration variables.</p> <blockquote class="tip"> <p>It is possible to export multiple promises by wrapping them into <code>Promise.all([/* Your promises */]).</code></p> </blockquote> <pre><code class="hljs language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        entry<span class="token operator">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n        <span class="token comment">/* ... */</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>Returning a <code>Promise</code> only works when using webpack via CLI. <a href="/api/node/#webpack"><code>webpack()</code></a> expects an object.</p> </blockquote> <h2 id="exporting-multiple-configurations">Exporting multiple configurations<a href="#exporting-multiple-configurations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Instead of exporting a single configuration object/function, you may export multiple configurations (multiple functions are supported since webpack 3.1.0). When running webpack, all configurations are built. For instance, this is useful for <a href="/guides/author-libraries">bundling a library</a> for multiple <a href="/configuration/output/#outputlibrarytarget">targets</a> such as AMD and CommonJS:</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'./dist-amd.js\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'amd\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">\'amd\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n  mode<span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'./dist-commonjs.js\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'commonjs\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">\'commonjs\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./app.js\'</span><span class="token punctuation">,</span>\n  mode<span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>If you pass a name to <a href="/api/cli/#configuration-options"><code>--config-name</code></a> flag, webpack will only build that specific configuration.</p> </blockquote> '}}]);