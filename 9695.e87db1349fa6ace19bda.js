(self.webpackChunk=self.webpackChunk||[]).push([[9695],{9695:function(s){s.exports='<p>These options change how modules are resolved. webpack provides reasonable defaults, but it is possible to change the resolving in detail. Have a look at <a href="/concepts/module-resolution">Module Resolution</a> for more explanation of how the resolver works.</p> <h2 id="resolve"><code>resolve</code><a href="#resolve" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object</code></p> <p>Configure how modules are resolved. For example, when calling <code>import \'lodash\'</code> in ES2015, the <code>resolve</code> options can change where webpack goes to look for <code>\'lodash\'</code> (see <a href="#resolvemodules"><code>modules</code></a>).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// configuration options</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvealias"><code>resolve.alias</code><a href="#resolvealias" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>object</code></p> <p>Create aliases to <code>import</code> or <code>require</code> certain modules more easily. For example, to alias a bunch of commonly used <code>src/</code> folders:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      Utilities<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/utilities/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      Templates<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/templates/\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Now, instead of using relative paths when importing like so:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">\'../../utilities/utility\'</span><span class="token punctuation">;</span></code></pre> <p>you can use the alias:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Utility <span class="token keyword">from</span> <span class="token string">\'Utilities/utility\'</span><span class="token punctuation">;</span></code></pre> <p>A trailing <code>$</code> can also be added to the given object\'s keys to signify an exact match:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      xyz$<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'path/to/file.js\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>which would yield these results:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> Test1 <span class="token keyword">from</span> <span class="token string">\'xyz\'</span><span class="token punctuation">;</span> <span class="token comment">// Exact match, so path/to/file.js is resolved and imported</span>\n<span class="token keyword">import</span> Test2 <span class="token keyword">from</span> <span class="token string">\'xyz/file.js\'</span><span class="token punctuation">;</span> <span class="token comment">// Not an exact match, normal resolution takes place</span></code></pre> <p>The following table explains other cases:</p> <table> <thead> <tr> <th><code>alias:</code></th> <th><code>import \'xyz\'</code></th> <th><code>import \'xyz/file.js\'</code></th> </tr> </thead> <tbody> <tr> <td data-th="alias:"><span><code>{}</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/node_modules/xyz/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/xyz/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz: \'/abc/path/to/file.js\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/path/to/file.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span>error</span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz$: \'/abc/path/to/file.js\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/path/to/file.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/xyz/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz: \'./dir/file.js\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/dir/file.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span>error</span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz$: \'./dir/file.js\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/dir/file.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/xyz/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz: \'/some/dir\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/some/dir/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/some/dir/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz$: \'/some/dir\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/some/dir/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/xyz/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz: \'./dir\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/dir/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/dir/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz: \'modu\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/node_modules/modu/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/modu/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz$: \'modu\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/node_modules/modu/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/xyz/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz: \'modu/some/file.js\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/node_modules/modu/some/file.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span>error</span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz: \'modu/dir\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/node_modules/modu/dir/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/modu/dir/file.js</code></span></td> </tr> <tr> <td data-th="alias:"><span><code>{ xyz$: \'modu/dir\' }</code></span></td> <td data-th="import &#x27;xyz&#x27;"><span><code>/abc/node_modules/modu/dir/index.js</code></span></td> <td data-th="import &#x27;xyz/file.js&#x27;"><span><code>/abc/node_modules/xyz/file.js</code></span></td> </tr> </tbody> </table> <p><code>index.js</code> may resolve to another file if defined in the <code>package.json</code>.</p> <p><code>/abc/node_modules</code> may resolve in <code>/node_modules</code> too.</p> <blockquote class="warning"> <p><code>resolve.alias</code> takes precedence over other module resolutions.</p> </blockquote> <blockquote class="warning"> <p><a href="https://github.com/webpack-contrib/null-loader"><code>null-loader</code></a> is deprecated in webpack 5. use <code>alias: { xyz$: false }</code> or absolute path <code>alias: {[path.resolve(__dirname, \'./path/to/module\')]: false }</code></p> </blockquote> <blockquote class="warning"> <p><code>[string]</code> values are supported since webpack 5.</p> </blockquote> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      _<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/utilities/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/templates/\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Setting <code>resolve.alias</code> to <code>false</code> will tell webpack to ignore a module.</p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">\'ignored-module\'</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token string">\'./ignored-module\'</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvealiasfields"><code>resolve.aliasFields</code><a href="#resolvealiasfields" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string]: [\'browser\']</code></p> <p>Specify a field, such as <code>browser</code>, to be parsed according to <a href="https://github.com/defunctzombie/package-browser-field-spec">this specification</a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    aliasFields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'browser\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvecachewithcontext"><code>resolve.cacheWithContext</code><a href="#resolvecachewithcontext" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean</code> (since webpack 3.1.0)</p> <p>If unsafe cache is enabled, includes <code>request.context</code> in the cache key. This option is taken into account by the <a href="https://github.com/webpack/enhanced-resolve/"><code>enhanced-resolve</code></a> module. Since webpack 3.1.0 context in resolve caching is ignored when resolve or resolveLoader plugins are provided. This addresses a performance regression.</p> <h3 id="resolvedescriptionfiles"><code>resolve.descriptionFiles</code><a href="#resolvedescriptionfiles" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string] = [\'package.json\']</code></p> <p>The JSON files to use for descriptions.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    descriptionFiles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'package.json\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolveenforceextension"><code>resolve.enforceExtension</code><a href="#resolveenforceextension" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean = false</code></p> <p>If <code>true</code>, it will not allow extension-less files. So by default <code>require(\'./foo\')</code> works if <code>./foo</code> has a <code>.js</code> extension, but with this enabled only <code>require(\'./foo.js\')</code> will work.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    enforceExtension<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolveenforcemoduleextension"><code>resolve.enforceModuleExtension</code><a href="#resolveenforcemoduleextension" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean = false</code></p> <blockquote class="warning"> <p>Removed in webpack 5</p> </blockquote> <p>Tells webpack whether to require to use an extension for modules (e.g. loaders).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    enforceModuleExtension<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolveextensions"><code>resolve.extensions</code><a href="#resolveextensions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string] = [\'.wasm\', \'.mjs\', \'.js\', \'.json\']</code></p> <p>Attempt to resolve these extensions in order.</p> <blockquote class="warning"> <p>If multiple files share the same name but have different extensions, webpack will resolve the one with the extension listed first in the array and skip the rest.</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.wasm\'</span><span class="token punctuation">,</span> <span class="token string">\'.mjs\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.json\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>which is what enables users to leave off the extension when importing:</p> <pre><code class="hljs language-js"><span class="token keyword">import</span> File <span class="token keyword">from</span> <span class="token string">\'../path/to/file\'</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>Using this will <strong>override the default array</strong>, meaning that webpack will no longer try to resolve modules using the default extensions.</p> </blockquote> <h3 id="resolvemainfields"><code>resolve.mainFields</code><a href="#resolvemainfields" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string]</code></p> <p>When importing from an npm package, e.g. <code>import * as D3 from \'d3\'</code>, this option will determine which fields in its <code>package.json</code> are checked. The default values will vary based upon the <a href="/concepts/targets"><code>target</code></a> specified in your webpack configuration.</p> <p>When the <code>target</code> property is set to <code>webworker</code>, <code>web</code>, or left unspecified:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mainFields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'browser\'</span><span class="token punctuation">,</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'main\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>For any other target (including <code>node</code>):</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mainFields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'main\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>For example, consider an arbitrary library called <code>upstream</code> with a <code>package.json</code> that contains the following fields:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token string">"build/upstream.js"</span><span class="token punctuation">,</span>\n  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"index"</span>\n<span class="token punctuation">}</span></code></pre> <p>When we <code>import * as Upstream from \'upstream\'</code> this will actually resolve to the file in the <code>browser</code> property. The <code>browser</code> property takes precedence because it\'s the first item in <code>mainFields</code>. Meanwhile, a Node.js application bundled by webpack will first try to resolve using the file in the <code>module</code> field.</p> <h3 id="resolvemainfiles"><code>resolve.mainFiles</code><a href="#resolvemainfiles" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string] = [\'index\']</code></p> <p>The filename to be used while resolving directories.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    mainFiles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'index\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolveexportsfields"><code>resolve.exportsFields</code><a href="#resolveexportsfields" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string] = [\'exports\']</code></p> <p>Fields in package.json that are used for resolving module requests. See <a href="/guides/package-exports/">package-exports guideline</a> for more information.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    exportsFields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'exports\'</span><span class="token punctuation">,</span> <span class="token string">\'myCompanyExports\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvemodules"><code>resolve.modules</code><a href="#resolvemodules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string] = [\'node_modules\']</code></p> <p>Tell webpack what directories should be searched when resolving modules.</p> <p>Absolute and relative paths can both be used, but be aware that they will behave a bit differently.</p> <p>A relative path will be scanned similarly to how Node scans for <code>node_modules</code>, by looking through the current directory as well as its ancestors (i.e. <code>./node_modules</code>, <code>../node_modules</code>, and on).</p> <p>With an absolute path, it will only search in the given directory.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    modules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'node_modules\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>If you want to add a directory to search in that takes precedence over <code>node_modules/</code>:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    modules<span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'node_modules\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolveunsafecache"><code>resolve.unsafeCache</code><a href="#resolveunsafecache" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>RegExp</code> <code>[RegExp]</code> <code>boolean: true</code></p> <p>Enable aggressive, but <strong>unsafe</strong>, caching of modules. Passing <code>true</code> will cache everything.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    unsafeCache<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>A regular expression, or an array of regular expressions, can be used to test file paths and only cache certain modules. For example, to only cache utilities:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    unsafeCache<span class="token operator">:</span> <span class="token regex">/src\\/utilities/</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>Changes to cached paths may cause failure in rare cases.</p> </blockquote> <h3 id="resolveplugins"><code>resolve.plugins</code><a href="#resolveplugins" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><a href="/plugins/"><code>[Plugin]</code></a></p> <p>A list of additional resolve plugins which should be applied. It allows plugins such as <a href="https://www.npmjs.com/package/directory-named-webpack-plugin"><code>DirectoryNamedWebpackPlugin</code></a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">DirectoryNamedWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvepreferrelative"><code>resolve.preferRelative</code><a href="#resolvepreferrelative" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean</code></p> <p>When enabled, webpack would prefer to resolve module requests as relative requests instead of using modules from <code>node_modules</code> directories.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    preferRelative<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-js"><span class="token comment">// let\'s say `src/logo.svg` exists</span>\n<span class="token keyword">import</span> logo1 <span class="token keyword">from</span> <span class="token string">\'logo.svg\'</span><span class="token punctuation">;</span> <span class="token comment">// this is viable when `preferRelative` enabled</span>\n<span class="token keyword">import</span> logo2 <span class="token keyword">from</span> <span class="token string">\'./logo.svg\'</span><span class="token punctuation">;</span> <span class="token comment">// otherwise you can only use relative path to resolve logo.svg</span>\n\n<span class="token comment">// `preferRelative` is enabled by default for `new URL()` case</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">\'module/path\'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">\'./module/path\'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvesymlinks"><code>resolve.symlinks</code><a href="#resolvesymlinks" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean = true</code></p> <p>Whether to resolve symlinks to their symlinked location.</p> <p>When enabled, symlinked resources are resolved to their <em>real</em> path, not their symlinked location. Note that this may cause module resolution to fail when using tools that symlink packages (like <code>npm link</code>).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    symlinks<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvecachepredicate"><code>resolve.cachePredicate</code><a href="#resolvecachepredicate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>function(module) => boolean</code></p> <p>A function which decides whether a request should be cached or not. An object is passed to the function with <code>path</code> and <code>request</code> properties. It must return a boolean.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">cachePredicate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// additional logic</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolverestrictions"><code>resolve.restrictions</code><a href="#resolverestrictions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string, RegExp]</code></p> <p>A list of resolve restrictions to restrict the paths that a request can be resolved on.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    restrictions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token regex">/\\.(sass|scss|css)$/</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolveroots"><code>resolve.roots</code><a href="#resolveroots" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string]</code></p> <p>A list of directories where requests of server-relative URLs (starting with \'/\') are resolved, defaults to <a href="/configuration/entry-context/#context"><code>context</code> configuration option</a>. On non-Windows systems these requests are resolved as an absolute path first.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js"><span class="token keyword">const</span> fixtures <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'fixtures\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    roots<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname<span class="token punctuation">,</span> fixtures<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolveimportsfields"><code>resolve.importsFields</code><a href="#resolveimportsfields" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string]</code></p> <p>Fields from <code>package.json</code> which are used to provide the internal requests of a package (requests starting with <code>#</code> are considered internal).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    importsFields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'browser\'</span><span class="token punctuation">,</span> <span class="token string">\'module\'</span><span class="token punctuation">,</span> <span class="token string">\'main\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h3 id="resolvefallback"><code>resolve.fallback</code><a href="#resolvefallback" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>boolean</code></p> <p>Redirect module requests when normal resolving fails.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    fallback<span class="token operator">:</span> <span class="token punctuation">{</span>\n      xyz<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'path/to/file.js\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="resolveloader"><code>resolveLoader</code><a href="#resolveloader" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>object { modules [string] = [\'node_modules\'], extensions [string] = [\'.js\', \'.json\'], mainFields [string] = [\'loader\', \'main\']}</code></p> <p>This set of options is identical to the <code>resolve</code> property set above, but is used only to resolve webpack\'s <a href="/concepts/loaders">loader</a> packages.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolveLoader<span class="token operator">:</span> <span class="token punctuation">{</span>\n    modules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'node_modules\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.json\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    mainFields<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'loader\'</span><span class="token punctuation">,</span> <span class="token string">\'main\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>Note that you can use alias here and other features familiar from resolve. For example <code>{ txt: \'raw-loader\' }</code> would shim <code>txt!templates/demo.txt</code> to use <code>raw-loader</code>.</p> </blockquote> <h3 id="resolveloadermoduleextensions"><code>resolveLoader.moduleExtensions</code><a href="#resolveloadermoduleextensions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>[string]</code></p> <blockquote class="warning"> <p>Removed in webpack 5</p> </blockquote> <p>The extensions/suffixes that are used when resolving loaders. Since version two, we <a href="/migrate/3/#automatic--loader-module-name-extension-removed">strongly recommend</a> using the full name, e.g. <code>example-loader</code>, as much as possible for clarity. However, if you really wanted to exclude the <code>-loader</code> bit, i.e. just use <code>example</code>, you can use this option to do so:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolveLoader<span class="token operator">:</span> <span class="token punctuation">{</span>\n    moduleExtensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'-loader\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> '}}]);