(self.webpackChunk=self.webpackChunk||[]).push([[7052],{7052:function(n){n.exports='<p>The top-level <code>output</code> key contains set of options instructing webpack on how and where it should output your bundles, assets and anything else you bundle or load with webpack.</p> <h2 id="outputauxiliarycomment"><code>output.auxiliaryComment</code><a href="#outputauxiliarycomment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>object</code></p> <p>When used in tandem with <a href="#outputlibrary"><code>output.library</code></a> and <a href="#outputlibrarytarget"><code>output.libraryTarget</code></a>, this option allows users to insert comments within the export wrapper. To insert the same comment for each <code>libraryTarget</code> type, set <code>auxiliaryComment</code> to a string:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'someLibName\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'someLibName.js\'</span><span class="token punctuation">,</span>\n    auxiliaryComment<span class="token operator">:</span> <span class="token string">\'Test Comment\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>which will yield the following:</p> <p><strong>someLibName.js</strong></p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&#x26;&#x26;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&#x26;&#x26;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'lodash\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">\'someLibName\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'lodash\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Test Comment</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">\'someLibName\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token string">\'_\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">__WEBPACK_EXTERNAL_MODULE_1__</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>For fine-grained control over each <code>libraryTarget</code> comment, pass an object:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    auxiliaryComment<span class="token operator">:</span> <span class="token punctuation">{</span>\n      root<span class="token operator">:</span> <span class="token string">\'Root Comment\'</span><span class="token punctuation">,</span>\n      commonjs<span class="token operator">:</span> <span class="token string">\'CommonJS Comment\'</span><span class="token punctuation">,</span>\n      commonjs2<span class="token operator">:</span> <span class="token string">\'CommonJS2 Comment\'</span><span class="token punctuation">,</span>\n      amd<span class="token operator">:</span> <span class="token string">\'AMD Comment\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputcharset"><code>output.charset</code><a href="#outputcharset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Tells webpack to add <code>charset="utf-8"</code> to the HTML <code>&#x3C;script></code> tag.</p> <blockquote class="tip"> <p>Although <code>charset</code> attribute for <code>&#x3C;script></code> tag was <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#Deprecated_attributes">deprecated</a>, webpack still adds it by default for compatibility with non-modern browsers.</p> </blockquote> <h2 id="outputchunkfilename"><code>output.chunkFilename</code><a href="#outputchunkfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[id].js\'</code> <code>function (pathData, assetInfo) => string</code></p> <p>This option determines the name of non-initial chunk files. See <a href="#outputfilename"><code>output.filename</code></a> option for details on the possible values.</p> <p>Note that these filenames need to be generated at runtime to send the requests for chunks. Because of this, placeholders like <code>[name]</code> and <code>[chunkhash]</code> need to add a mapping from chunk id to placeholder value to the output bundle with the webpack runtime. This increases the size and may invalidate the bundle when placeholder value for any chunk changes.</p> <p>By default <code>[id].js</code> is used or a value inferred from <a href="#outputfilename"><code>output.filename</code></a> (<code>[name]</code> is replaced with <code>[id]</code> or <code>[id].</code> is prepended).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkFilename<span class="token operator">:</span> <span class="token string">\'[id].js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Usage as a function:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">chunkFilename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pathData<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'main\'</span> <span class="token operator">?</span> <span class="token string">\'[name].js\'</span><span class="token operator">:</span> <span class="token string">\'[name]/[name].js\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkloadtimeout"><code>output.chunkLoadTimeout</code><a href="#outputchunkloadtimeout" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 120000</code></p> <p>Number of milliseconds before chunk request expires. This option is supported since webpack 2.6.0.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkLoadTimeout<span class="token operator">:</span> <span class="token number">30000</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkloadingglobal"><code>output.chunkLoadingGlobal</code><a href="#outputchunkloadingglobal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'webpackChunkwebpack\'</code></p> <p>The global variable used by webpack for loading of chunks.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkLoadingGlobal<span class="token operator">:</span> <span class="token string">\'myCustomFunc\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkloading"><code>output.chunkLoading</code><a href="#outputchunkloading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>false</code> <code>string: \'jsonp\' | \'import-scripts\' | \'require\' | \'async-node\' | &#x3C;any string></code></p> <p>The method to load chunks (methods included by default are \'jsonp\' (web), \'importScripts\' (WebWorker), \'require\' (sync node.js), \'async-node\' (async node.js), but others might be added by plugins).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkLoading<span class="token operator">:</span> <span class="token string">\'async-node\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputchunkformat"><code>output.chunkFormat</code><a href="#outputchunkformat" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>false</code> <code>string: \'array-push\' | \'commonjs\' | &#x3C;any string></code></p> <p>The format of chunks (formats included by default are \'array-push\' (web/WebWorker), \'commonjs\' (node.js), but others might be added by plugins).</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    chunkFormat<span class="token operator">:</span> <span class="token string">\'commonjs\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputenabledchunkloadingtypes"><code>output.enabledChunkLoadingTypes</code><a href="#outputenabledchunkloadingtypes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[string: \'jsonp\' | \'import-scripts\' | \'require\' | \'async-node\' | &#x3C;any string>]</code></p> <p>List of chunk loading types enabled for use by entry points. Will be automatically filled by webpack. Only needed when using a function as entry option and returning chunkLoading option from there.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//...</span>\n    enabledChunkLoadingTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'jsonp\'</span><span class="token punctuation">,</span> <span class="token string">\'require\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputcrossoriginloading"><code>output.crossOriginLoading</code><a href="#outputcrossoriginloading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string: \'anonymous\' | \'use-credentials\'</code></p> <p>Tells webpack to enable <a href="https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin">cross-origin</a> loading of chunks. Only takes effect when <a href="/configuration/target/"><code>target</code></a> is set to <code>\'web\'</code>, which uses JSONP for loading on-demand chunks, by adding script tags.</p> <ul> <li><code>\'anonymous\'</code> - Enable cross-origin loading <strong>without credentials</strong></li> <li><code>\'use-credentials\'</code> - Enable cross-origin loading <strong>with credentials</strong></li> </ul> <h2 id="outputdevtoolfallbackmodulefilenametemplate"><code>output.devtoolFallbackModuleFilenameTemplate</code><a href="#outputdevtoolfallbackmodulefilenametemplate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>function (info)</code></p> <p>A fallback used when the template string or function above yields duplicates.</p> <p>See <a href="#outputdevtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a>.</p> <h2 id="outputdevtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code><a href="#outputdevtoolmodulefilenametemplate" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'webpack://[namespace]/[resource-path]?[loaders]\'</code> <code>function (info) => string</code></p> <p>This option is only used when <a href="/configuration/devtool"><code>devtool</code></a> uses an options which requires module names.</p> <p>Customize the names used in each source map\'s <code>sources</code> array. This can be done by passing a template string or function. For example, when using <code>devtool: \'eval\'</code>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    devtoolModuleFilenameTemplate<span class="token operator">:</span> <span class="token string">\'webpack://[namespace]/[resource-path]?[loaders]\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The following substitutions are available in template strings (via webpack\'s internal <a href="https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js"><code>ModuleFilenameHelpers</code></a>):</p> <table> <thead> <tr> <th>Template</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Template"><span>[absolute-resource-path]</span></td> <td data-th="Description"><span>The absolute filename</span></td> </tr> <tr> <td data-th="Template"><span>[all-loaders]</span></td> <td data-th="Description"><span>Automatic and explicit loaders and params up to the name of the first loader</span></td> </tr> <tr> <td data-th="Template"><span>[hash]</span></td> <td data-th="Description"><span>The hash of the module identifier</span></td> </tr> <tr> <td data-th="Template"><span>[id]</span></td> <td data-th="Description"><span>The module identifier</span></td> </tr> <tr> <td data-th="Template"><span>[loaders]</span></td> <td data-th="Description"><span>Explicit loaders and params up to the name of the first loader</span></td> </tr> <tr> <td data-th="Template"><span>[resource]</span></td> <td data-th="Description"><span>The path used to resolve the file and any query params used on the first loader</span></td> </tr> <tr> <td data-th="Template"><span>[resource-path]</span></td> <td data-th="Description"><span>The path used to resolve the file without any query params</span></td> </tr> <tr> <td data-th="Template"><span>[namespace]</span></td> <td data-th="Description"><span>The modules namespace. This is usually the library name when building as a library, empty otherwise</span></td> </tr> </tbody> </table> <p>When using a function, the same options are available camel-cased via the <code>info</code> parameter:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">devtoolModuleFilenameTemplate</span><span class="token operator">:</span> <span class="token parameter">info</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">webpack:///</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>resourcePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>loaders<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>If multiple modules would result in the same name, <a href="#outputdevtoolfallbackmodulefilenametemplate"><code>output.devtoolFallbackModuleFilenameTemplate</code></a> is used instead for these modules.</p> <h2 id="outputdevtoolnamespace"><code>output.devtoolNamespace</code><a href="#outputdevtoolnamespace" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>This option determines the modules namespace used with the <a href="#outputdevtoolmodulefilenametemplate"><code>output.devtoolModuleFilenameTemplate</code></a>. When not specified, it will default to the value of: <a href="#outputlibrary"><code>output.library</code></a>. It\'s used to prevent source file path collisions in sourcemaps when loading multiple libraries built with webpack.</p> <p>For example, if you have 2 libraries, with namespaces <code>library1</code> and <code>library2</code>, which both have a file <code>./src/index.js</code> (with potentially different contents), they will expose these files as <code>webpack://library1/./src/index.js</code> and <code>webpack://library2/./src/index.js</code>.</p> <h2 id="outputfilename"><code>output.filename</code><a href="#outputfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>function (pathData, assetInfo) => string</code></p> <p>This option determines the name of each output bundle. The bundle is written to the directory specified by the <a href="#outputpath"><code>output.path</code></a> option.</p> <p>For a single <a href="/configuration/entry-context/#entry"><code>entry</code></a> point, this can be a static name.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>However, when creating multiple bundles via more than one entry point, code splitting, or various plugins, you should use one of the following substitutions to give each bundle a unique name...</p> <p>Using entry name:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Using internal chunk id:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[id].bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Using hashes generated from the generated content:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[contenthash].bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Combining multiple substitutions:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'[name].[contenthash].bundle.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Using function to return the filename:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">pathData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> pathData<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'main\'</span> <span class="token operator">?</span> <span class="token string">\'[name].js\'</span><span class="token operator">:</span> <span class="token string">\'[name]/[name].js\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Make sure to read the <a href="/guides/caching">Caching guide</a> for details. There are more steps involved than just setting this option.</p> <p>Note this option is called filename but you are still allowed to use something like <code>\'js/[name]/bundle.js\'</code> to create a folder structure.</p> <p>Note this option does not affect output files for on-demand-loaded chunks. It only affects output files that are initially loaded. For on-demand-loaded chunk files the <a href="#outputchunkfilename"><code>output.chunkFilename</code></a> option is used. Files created by loaders also aren\'t affected. In this case you would have to try the specific loader\'s available options.</p> <h2 id="template-strings">Template strings<a href="#template-strings" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>The following substitutions are available in template strings (via webpack\'s internal <a href="https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js"><code>TemplatedPathPlugin</code></a>):</p> <p>Substitutions available on Compilation-level:</p> <table> <thead> <tr> <th>Template</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Template"><span>[fullhash]</span></td> <td data-th="Description"><span>The full hash of compilation</span></td> </tr> <tr> <td data-th="Template"><span>[hash]</span></td> <td data-th="Description"><span>Same, but deprecated</span></td> </tr> </tbody> </table> <p>Substitutions available on Chunk-level:</p> <table> <thead> <tr> <th>Template</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Template"><span>[id]</span></td> <td data-th="Description"><span>The ID of the chunk</span></td> </tr> <tr> <td data-th="Template"><span>[name]</span></td> <td data-th="Description"><span>The name of the chunk, if set, otherwise the ID of the chunk</span></td> </tr> <tr> <td data-th="Template"><span>[chunkhash]</span></td> <td data-th="Description"><span>The hash of the chunk, including all elements of the chunk</span></td> </tr> <tr> <td data-th="Template"><span>[contenthash]</span></td> <td data-th="Description"><span>The hash of the chunk, including only elements of this content type (affected by <code>optimization.realContentHash</code>)</span></td> </tr> </tbody> </table> <p>Substitutions available on Module-level:</p> <table> <thead> <tr> <th>Template</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Template"><span>[id]</span></td> <td data-th="Description"><span>The ID of the module</span></td> </tr> <tr> <td data-th="Template"><span>[moduleid]</span></td> <td data-th="Description"><span>Same, but deprecated</span></td> </tr> <tr> <td data-th="Template"><span>[hash]</span></td> <td data-th="Description"><span>The hash of the module</span></td> </tr> <tr> <td data-th="Template"><span>[modulehash]</span></td> <td data-th="Description"><span>Same, but deprecated</span></td> </tr> <tr> <td data-th="Template"><span>[contenthash]</span></td> <td data-th="Description"><span>The hash of the content of the module</span></td> </tr> </tbody> </table> <p>Substitutions available on File-level:</p> <table> <thead> <tr> <th>Template</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Template"><span>[file]</span></td> <td data-th="Description"><span>Filename and path, without query or fragment</span></td> </tr> <tr> <td data-th="Template"><span>[query]</span></td> <td data-th="Description"><span>Query with leading <code>?</code></span></td> </tr> <tr> <td data-th="Template"><span>[fragment]</span></td> <td data-th="Description"><span>Fragment with leading <code>#</code></span></td> </tr> <tr> <td data-th="Template"><span>[base]</span></td> <td data-th="Description"><span>Only filename (including extensions), without path</span></td> </tr> <tr> <td data-th="Template"><span>[filebase]</span></td> <td data-th="Description"><span>Same, but deprecated</span></td> </tr> <tr> <td data-th="Template"><span>[path]</span></td> <td data-th="Description"><span>Only path, without filename</span></td> </tr> <tr> <td data-th="Template"><span>[name]</span></td> <td data-th="Description"><span>Only filename without extension or path</span></td> </tr> <tr> <td data-th="Template"><span>[ext]</span></td> <td data-th="Description"><span>Extension with leading <code>.</code></span></td> </tr> </tbody> </table> <p>Substitutions available on URL-level:</p> <table> <thead> <tr> <th>Template</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td data-th="Template"><span>[url]</span></td> <td data-th="Description"><span>URL</span></td> </tr> </tbody> </table> <blockquote class="tip"> <p><code>[file]</code> equals <code>[path][base]</code>. <code>[base]</code> equals <code>[name][ext]</code>. The full path is <code>[path][name][ext][query][fragment]</code> or <code>[path][base][query][fragment]</code> or <code>[file][query][fragment]</code>.</p> </blockquote> <p>The length of hashes (<code>[hash]</code>, <code>[contenthash]</code> or <code>[chunkhash]</code>) can be specified using <code>[hash:16]</code> (defaults to 20). Alternatively, specify <a href="#outputhashdigestlength"><code>output.hashDigestLength</code></a> to configure the length globally.</p> <p>It is possible to filter out placeholder replacement when you want to use one of the placeholders in the actual file name. For example, to output a file <code>[name].js</code>, you have to escape the <code>[name]</code> placeholder by adding backslashes between the brackets. So that <code>[\\name\\]</code> generates <code>[name]</code> instead of getting replaced with the <code>name</code> of the asset.</p> <p>Example: <code>[\\id\\]</code> generates <code>[id]</code> instead of getting replaced with the <code>id</code>.</p> <p>If using a function for this option, the function will be passed an object containing data for the substitutions in the table above. Substitutions will be applied to the returned string too. The passed object will have this type: (properties available depending on context)</p> <pre><code class="hljs language-typescript"><span class="token keyword">type</span> <span class="token class-name">PathData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  hash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">hashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  chunk<span class="token operator">:</span> Chunk <span class="token operator">|</span> ChunkPathData<span class="token punctuation">,</span>\n  <span class="token keyword">module</span><span class="token operator">:</span> Module <span class="token operator">|</span> ModulePathData<span class="token punctuation">,</span>\n  contentHashType<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  contentHash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">contentHashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  filename<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  runtime<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> SortableSet<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>\n  chunkGraph<span class="token operator">:</span> ChunkGraph\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">ChunkPathData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  hash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">hashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  contentHash<span class="token operator">:</span> Record<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">,</span>\n  contentHashWithLength<span class="token operator">:</span> Record<span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token operator">></span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">ModulePathData</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>\n  hash<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">hashWithLength</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span></code></pre> <blockquote class="tip"> <p>In some context properties will use JavaScript code expressions instead of raw values. In these cases the <code>WithLength</code> variant is available and should be used instead of slicing the original value.</p> </blockquote> <h2 id="outputassetmodulefilename"><code>output.assetModuleFilename</code><a href="#outputassetmodulefilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[hash][ext][query]\'</code></p> <p>The same as <a href="#outputfilename"><code>output.filename</code></a> but for <a href="/guides/asset-modules/">Asset Modules</a></p> <h2 id="outputglobalobject"><code>output.globalObject</code><a href="#outputglobalobject" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'window\'</code></p> <p>When targeting a library, especially when <code>libraryTarget</code> is <code>\'umd\'</code>, this option indicates what global object will be used to mount the library. To make UMD build available on both browsers and Node.js, set <code>output.globalObject</code> option to <code>\'this\'</code>. Defaults to <code>self</code> for Web-like targets.</p> <p>For example:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'myLib\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span><span class="token punctuation">,</span>\n    filename<span class="token operator">:</span> <span class="token string">\'myLib.js\'</span><span class="token punctuation">,</span>\n    globalObject<span class="token operator">:</span> <span class="token string">\'this\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputuniquename"><code>output.uniqueName</code><a href="#outputuniquename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>A unique name of the webpack build to avoid multiple webpack runtimes to conflict when using globals. It defaults to <a href="/configuration/output/#outputlibrary"><code>output.library</code></a> name or the package name from <code>package.json</code> in the context, if both aren\'t found, it is set to an <code>\'\'</code>.</p> <p><code>output.uniqueName</code> will be used to generate unique globals for:</p> <ul> <li><a href="/configuration/output/#outputchunkloadingglobal"><code>output.chunkLoadingGlobal</code></a></li> </ul> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    uniqueName<span class="token operator">:</span> <span class="token string">\'my-package-xyz\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputhashdigest"><code>output.hashDigest</code><a href="#outputhashdigest" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'hex\'</code></p> <p>The encoding to use when generating the hash. All encodings from Node.JS\' <a href="https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding"><code>hash.digest</code></a> are supported. Using <code>\'base64\'</code> for filenames might be problematic since it has the character <code>/</code> in its alphabet. Likewise <code>\'latin1\'</code> could contain any character.</p> <h2 id="outputhashdigestlength"><code>output.hashDigestLength</code><a href="#outputhashdigestlength" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>number = 20</code></p> <p>The prefix length of the hash digest to use.</p> <h2 id="outputhashfunction"><code>output.hashFunction</code><a href="#outputhashfunction" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'md4\'</code> <code>function</code></p> <p>The hashing algorithm to use. All functions from Node.JS\' <a href="https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options"><code>crypto.createHash</code></a> are supported. Since <code>4.0.0-alpha2</code>, the <code>hashFunction</code> can now be a constructor to a custom hash function. You can provide a non-crypto hash function for performance reasons.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hashFunction<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'metrohash\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MetroHash64\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Make sure that the hashing function will have <code>update</code> and <code>digest</code> methods available.</p> <h2 id="outputhashsalt"><code>output.hashSalt</code><a href="#outputhashsalt" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>An optional salt to update the hash via Node.JS\' <a href="https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding"><code>hash.update</code></a>.</p> <h2 id="outputhotupdatechunkfilename"><code>output.hotUpdateChunkFilename</code><a href="#outputhotupdatechunkfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[id].[fullhash].hot-update.js\'</code></p> <p>Customize the filenames of hot update chunks. See <a href="#outputfilename"><code>output.filename</code></a> option for details on the possible values.</p> <p>The only placeholders allowed here are <code>[id]</code> and <code>[fullhash]</code>, the default being:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    hotUpdateChunkFilename<span class="token operator">:</span> <span class="token string">\'[id].[fullhash].hot-update.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>Typically you don\'t need to change <code>output.hotUpdateChunkFilename</code>.</p> </blockquote> <h2 id="outputhotupdateglobal"><code>output.hotUpdateGlobal</code><a href="#outputhotupdateglobal" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code></p> <p>Only used when <a href="/configuration/target/"><code>target</code></a> is set to <code>\'web\'</code>, which uses JSONP for loading hot updates.</p> <p>A JSONP function used to asynchronously load hot-update chunks.</p> <p>For details see <a href="#outputchunkloadingglobal"><code>output.chunkLoadingGlobal</code></a>.</p> <h2 id="outputhotupdatemainfilename"><code>output.hotUpdateMainFilename</code><a href="#outputhotupdatemainfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[runtime].[fullhash].hot-update.json\'</code> <code>function</code></p> <p>Customize the main hot update filename. <code>[fullhash]</code> and <code>[runtime]</code> are available as placeholder.</p> <blockquote class="tip"> <p>Typically you don\'t need to change <code>output.hotUpdateMainFilename</code>.</p> </blockquote> <h2 id="outputlibrary"><code>output.library</code><a href="#outputlibrary" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>object</code></p> <blockquote class="tip"> <p>Can be given an <code>object</code> since webpack 3.1.0. Effective for <code>libraryTarget: \'umd\'</code>.</p> </blockquote> <p>How the value of the <code>output.library</code> is used depends on the value of the <a href="#outputlibrarytarget"><code>output.libraryTarget</code></a> option; please refer to that section for the complete details. Note that the default option for <code>output.libraryTarget</code> is <code>var</code>, so if the following configuration option is used:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The variable <code>MyLibrary</code> will be bound with the return value of your entry file, if the resulting output is included as a script tag in an HTML page.</p> <blockquote class="warning"> <p>Note that if an <code>array</code> is provided as an <code>entry</code> point, only the last module in the array will be exposed. If an <code>object</code> is provided, it can be exposed using an <code>array</code> syntax (see <a href="https://github.com/webpack/webpack/tree/master/examples/multi-part-library">this example</a> for details).</p> </blockquote> <blockquote class="tip"> <p>Read the <a href="/guides/author-libraries/">authoring libraries guide</a> guide for more information on <code>output.library</code> as well as <code>output.libraryTarget</code>.</p> </blockquote> <h2 id="outputscripttype">output.scriptType<a href="#outputscripttype" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string: \'module\' | \'text/javascript\'</code> <code>boolean = false</code></p> <p>This option allows loading asynchronous chunks with a custom script type, such as <code>&#x3C;script type="module" ...></code>.</p> <blockquote class="tip"> <p>If <a href="#outputmodule"><code>output.module</code></a> is set to <code>true</code>, <code>output.scriptType</code> will default to <code>\'module\'</code> instead of <code>false</code>.</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    scriptType<span class="token operator">:</span> <span class="token string">\'module\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputlibraryexport"><code>output.libraryExport</code><a href="#outputlibraryexport" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>[string]</code></p> <p>Configure which module or modules will be exposed via the <code>libraryTarget</code>. It is <code>undefined</code> by default, same behaviour will be applied if you set <code>libraryTarget</code> to an empty string e.g. <code>\'\'</code> it will export the whole (namespace) object. The examples below demonstrate the effect of this configuration when using <code>libraryTarget: \'var\'</code>.</p> <p>The following configurations are supported:</p> <p><code>libraryExport: \'default\'</code> - The <strong>default export of your entry point</strong> will be assigned to the library target:</p> <pre><code class="hljs language-javascript"><span class="token comment">// if your entry has a default export of `MyDefaultModule`</span>\n<span class="token keyword">var</span> MyDefaultModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>default<span class="token punctuation">;</span></code></pre> <p><code>libraryExport: \'MyModule\'</code> - The <strong>specified module</strong> will be assigned to the library target:</p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> MyModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">;</span></code></pre> <p><code>libraryExport: [\'MyModule\', \'MySubModule\']</code> - The array is interpreted as a <strong>path to a module</strong> to be assigned to the library target:</p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> MySubModule <span class="token operator">=</span> _entry_return_<span class="token punctuation">.</span>MyModule<span class="token punctuation">.</span>MySubModule<span class="token punctuation">;</span></code></pre> <p>With the <code>libraryExport</code> configurations specified above, the resulting libraries could be utilized as such:</p> <pre><code class="hljs language-javascript">MyDefaultModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMySubModule<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h2 id="outputlibrarytarget"><code>output.libraryTarget</code><a href="#outputlibrarytarget" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'var\'</code></p> <p>Configure how the library will be exposed. Any one of the following options can be used. Please note that this option works in conjunction with the value assigned to <a href="#outputlibrary"><code>output.library</code></a>. For the following examples, it is assumed that this value is configured as <code>MyLibrary</code>.</p> <blockquote class="tip"> <p>Note that <code>_entry_return_</code> in the example code below is the value returned by the entry point. In the bundle itself, it is the output of the function that is generated by webpack from the entry point.</p> </blockquote> <h3 id="expose-a-variable">Expose a Variable<a href="#expose-a-variable" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>These options assign the return value of the entry point (e.g. whatever the entry point exported) to the name provided by <code>output.library</code> at whatever scope the bundle was included at.</p> <p><code>libraryTarget: \'var\'</code> - (default) When your library is loaded, the <strong>return value of your entry point</strong> will be assigned to a variable:</p> <pre><code class="hljs language-javascript"><span class="token keyword">var</span> MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// In a separate script...</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>When using this option, an empty <code>output.library</code> will result in no assignment.</p> </blockquote> <p><code>libraryTarget: \'assign\'</code> - This will generate an implied global which has the potential to reassign an existing value (use with caution).</p> <pre><code class="hljs language-javascript">MyLibrary <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span></code></pre> <p>Be aware that if <code>MyLibrary</code> isn\'t defined earlier your library will be set in global scope.</p> <blockquote class="warning"> <p>When using this option, an empty <code>output.library</code> will result in a broken output bundle.</p> </blockquote> <h3 id="expose-via-object-assignment">Expose Via Object Assignment<a href="#expose-via-object-assignment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>These options assign the return value of the entry point (e.g. whatever the entry point exported) to a specific object under the name defined by <code>output.library</code>.</p> <p>If <code>output.library</code> is not assigned a non-empty string, the default behavior is that all properties returned by the entry point will be assigned to the object as defined for the particular <code>output.libraryTarget</code>, via the following code fragment:</p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>libraryTarget<span class="token punctuation">,</span> _entry_return_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <blockquote class="warning"> <p>Note that not setting a <code>output.library</code> will cause all properties returned by the entry point to be assigned to the given object; there are no checks against existing property names.</p> </blockquote> <p><code>libraryTarget: "this"</code> - The <strong>return value of your entry point</strong> will be assigned to this under the property named by <code>output.library</code>. The meaning of <code>this</code> is up to you:</p> <pre><code class="hljs language-javascript"><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token comment">// In a separate script...</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nMyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// if this is window</span></code></pre> <p><code>libraryTarget: \'window\'</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>window</code> object using the <code>output.library</code> value.</p> <pre><code class="hljs language-javascript">window<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nwindow<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><code>libraryTarget: \'global\'</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>global</code> object using the <code>output.library</code> value.</p> <pre><code class="hljs language-javascript">global<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\nglobal<span class="token punctuation">.</span>MyLibrary<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><code>libraryTarget: \'commonjs\'</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>exports</code> object using the <code>output.library</code> value. As the name implies, this is used in CommonJS environments.</p> <pre><code class="hljs language-javascript">exports<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="module-definition-systems">Module Definition Systems<a href="#module-definition-systems" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>These options will result in a bundle that comes with a complete header to ensure compatibility with various module systems. The <code>output.library</code> option will take on a different meaning under the following <code>output.libraryTarget</code> options.</p> <p><code>libraryTarget: \'commonjs2\'</code> - The <strong>return value of your entry point</strong> will be assigned to the <code>module.exports</code>. As the name implies, this is used in CommonJS environments:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> _entry_return_<span class="token punctuation">;</span>\n\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>Note that <code>output.library</code> can\'t be used with this particular <code>output.libraryTarget</code>, for further details, please <a href="https://github.com/webpack/webpack/issues/11800">read this issue</a>.</p> <blockquote class="tip"> <p>Wondering the difference between CommonJS and CommonJS2 is? While they are similar, there are some subtle differences between them that are not usually relevant in the context of webpack. (For further details, please <a href="https://github.com/webpack/webpack/issues/1114">read this issue</a>.)</p> </blockquote> <p><code>libraryTarget: \'amd\'</code> - This will expose your library as an AMD module.</p> <p>AMD modules require that the entry chunk (e.g. the first script loaded by the <code>&#x3C;script></code> tag) be defined with specific properties, such as <code>define</code> and <code>require</code> which is typically provided by RequireJS or any compatible loaders (such as almond). Otherwise, loading the resulting AMD bundle directly will result in an error like <code>define is not defined</code>.</p> <p>So, with the following configuration...</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'amd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The generated output will be defined with the name "MyLibrary", i.e.</p> <pre><code class="hljs language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The bundle can be included as part of a script tag, and the bundle can be invoked like so:</p> <pre><code class="hljs language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">MyLibrary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with the library...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>If <code>output.library</code> is undefined, the following is generated instead.</p> <pre><code class="hljs language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>This bundle will not work as expected, or not work at all (in the case of the almond loader) if loaded directly with a <code>&#x3C;script></code> tag. It will only work through a RequireJS compatible asynchronous module loader through the actual path to that file, so in this case, the <code>output.path</code> and <code>output.filename</code> may become important for this particular setup if these are exposed directly on the server.</p> <p><code>libraryTarget: \'amd-require\'</code> - This packages your output with an immediately-executed AMD <code>require(dependencies, factory)</code> wrapper.</p> <p>The <code>\'amd-require\'</code> target allows for the use of AMD dependencies without needing a separate later invocation. As with the <code>\'amd\'</code> target, this depends on the appropriate <a href="https://github.com/amdjs/amdjs-api/blob/master/require.md"><code>require</code> function</a> being available in the environment in which the webpack output is loaded.</p> <p>With this target, the library name is ignored.</p> <p><code>libraryTarget: \'umd\'</code> - This exposes your library under all the module definitions, allowing it to work with CommonJS, AMD and as global variable. Take a look at the <a href="https://github.com/umdjs/umd">UMD Repository</a> to learn more.</p> <p>In this case, you need the <code>library</code> property to name your module:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>And finally the output is:</p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&#x26;&#x26;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&#x26;&#x26;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    exports<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    root<span class="token punctuation">[</span><span class="token string">\'MyLibrary\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">\'undefined\'</span> <span class="token operator">?</span> self <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>Note that omitting <code>library</code> will result in the assignment of all properties returned by the entry point be assigned directly to the root object, as documented under the <a href="#expose-via-object-assignment">object assignment section</a>. Example:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>The output will be:</p> <pre><code class="hljs language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">webpackUniversalModuleDefinition</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">&#x26;&#x26;</span> <span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">\'function\'</span> <span class="token operator">&#x26;&#x26;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span>\n    <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">\'object\'</span> <span class="token operator">?</span> exports <span class="token operator">:</span> root<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">\'undefined\'</span> <span class="token operator">?</span> self <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _entry_return_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>Since webpack 3.1.0, you may specify an object for <code>library</code> for differing names per targets:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    library<span class="token operator">:</span> <span class="token punctuation">{</span>\n      root<span class="token operator">:</span> <span class="token string">\'MyLibrary\'</span><span class="token punctuation">,</span>\n      amd<span class="token operator">:</span> <span class="token string">\'my-library\'</span><span class="token punctuation">,</span>\n      commonjs<span class="token operator">:</span> <span class="token string">\'my-common-library\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'umd\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>libraryTarget: \'system\'</code> - This will expose your library as a <a href="https://github.com/systemjs/systemjs/blob/master/docs/system-register.md"><code>System.register</code></a> module. This feature was first released in <a href="https://github.com/webpack/webpack/releases/tag/v4.30.0">webpack 4.30.0</a>.</p> <p>System modules require that a global variable <code>System</code> is present in the browser when the webpack bundle is executed. Compiling to <code>System.register</code> format allows you to <code>System.import(\'/bundle.js\')</code> without additional configuration and have your webpack bundle loaded into the System module registry.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    libraryTarget<span class="token operator">:</span> <span class="token string">\'system\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Output:</p> <pre><code class="hljs language-javascript">System<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    setters<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>By adding <code>output.library</code> to configuration in addition to having <code>output.libraryTarget</code> set to <code>system</code>, the output bundle will have the library name as an argument to <code>System.register</code>:</p> <pre><code class="hljs language-javascript">System<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">\'my-library\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">_export</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    setters<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">execute</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>You can access <a href="https://github.com/systemjs/systemjs/blob/master/docs/system-register.md#format-definition">SystemJS context</a> via <code>__system_context__</code>:</p> <pre><code class="hljs language-javascript"><span class="token comment">// Log the URL of the current SystemJS module</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__system_context__<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Import a SystemJS module, with the current SystemJS module\'s url as the parentUrl</span>\n__system_context__<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">\'./other-file.js\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <h3 id="other-targets">Other Targets<a href="#other-targets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p><code>libraryTarget: \'jsonp\'</code> - This will wrap the return value of your entry point into a jsonp wrapper.</p> <pre><code class="hljs language-javascript"><span class="token function">MyLibrary</span><span class="token punctuation">(</span>_entry_return_<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>The dependencies for your library will be defined by the <a href="/configuration/externals/"><code>externals</code></a> config.</p> <h2 id="outputimportfunctionname"><code>output.importFunctionName</code><a href="#outputimportfunctionname" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'import\'</code></p> <p>The name of the native <code>import()</code> function. Can be used for polyfilling, e.g. with <a href="https://github.com/GoogleChromeLabs/dynamic-import-polyfill"><code>dynamic-import-polyfill</code></a>.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    importFunctionName<span class="token operator">:</span> <span class="token string">\'__import__\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputpath"><code>output.path</code><a href="#outputpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = path.join(process.cwd(), \'dist\')</code></p> <p>The output directory as an <strong>absolute</strong> path.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist/assets\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>Note that <code>[fullhash]</code> in this parameter will be replaced with a hash of the compilation. See the <a href="/guides/caching/">Caching guide</a> for details.</p> <h2 id="outputpathinfo"><code>output.pathinfo</code><a href="#outputpathinfo" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean=true</code> <code>string: \'verbose\'</code></p> <p>Tells webpack to include comments in bundles with information about the contained modules. This option defaults to <code>true</code> in <code>development</code> and <code>false</code> in <code>production</code> <a href="/configuration/mode/">mode</a> respectively. <code>\'verbose\'</code> shows more information like exports, runtime requirements and bailouts.</p> <blockquote class="warning"> <p>While the data this comments can provide is useful during development when reading the generated code, it <strong>should not</strong> be used in production.</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    pathinfo<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>It also adds some info about tree shaking to the generated bundle.</p> </blockquote> <h2 id="outputpublicpath"><code>output.publicPath</code><a href="#outputpublicpath" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string</code> <code>function</code></p> <p>This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you\'ll receive 404 errors while loading these resources.</p> <p>This option specifies the <strong>public URL</strong> of the output directory when referenced in a browser. A relative URL is resolved relative to the HTML page (or <code>&#x3C;base></code> tag). Server-relative URLs, protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.</p> <p>The value of the option is prefixed to every URL created by the runtime or loaders. Because of this <strong>the value of this option ends with <code>/</code></strong> in most cases.</p> <p>Simple rule: The URL of your <a href="#outputpath"><code>output.path</code></a> from the view of the HTML page.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'public/assets\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'https://cdn.example.com/assets/\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>For this configuration:</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'/assets/\'</span><span class="token punctuation">,</span>\n    chunkFilename<span class="token operator">:</span> <span class="token string">\'[id].chunk.js\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>A request to a chunk will look like <code>/assets/4.chunk.js</code>.</p> <p>A loader outputting HTML might emit something like this:</p> <pre><code class="hljs language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/spinner.gif<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre> <p>or when loading an image in CSS:</p> <pre><code class="hljs language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>/assets/spinner.gif<span class="token punctuation">)</span></span><span class="token punctuation">;</span></code></pre> <p>The webpack-dev-server also takes a hint from <code>publicPath</code>, using it to determine where to serve the output files from.</p> <p>Note that <code>[fullhash]</code> in this parameter will be replaced with a hash of the compilation. See the <a href="/guides/caching">Caching guide</a> for details.</p> <p>Examples:</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// One of the below</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'https://cdn.example.com/assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// CDN (always HTTPS)</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'//cdn.example.com/assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// CDN (same protocol)</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'/assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// server-relative</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// relative to HTML page</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'../assets/\'</span><span class="token punctuation">,</span> <span class="token comment">// relative to HTML page</span>\n    publicPath<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> <span class="token comment">// relative to HTML page (same directory)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>In cases where the <code>publicPath</code> of output files can\'t be known at compile time, it can be left blank and set dynamically at runtime in the entry file using the <a href="https://stackoverflow.com/questions/12934929/what-are-free-variables">free variable</a> <code>__webpack_public_path__</code>.</p> <pre><code class="hljs language-javascript">__webpack_public_path__ <span class="token operator">=</span> myRuntimePublicPath<span class="token punctuation">;</span>\n\n<span class="token comment">// rest of your application entry</span></code></pre> <p>See <a href="https://github.com/webpack/webpack/issues/2776#issuecomment-233208623">this discussion</a> for more information on <code>__webpack_public_path__</code>.</p> <h2 id="outputsourcemapfilename"><code>output.sourceMapFilename</code><a href="#outputsourcemapfilename" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'[file].map[query]\'</code></p> <p>Configure how source maps are named. Only takes effect when <a href="/configuration/devtool/"><code>devtool</code></a> is set to <code>\'source-map\'</code>, which writes an output file.</p> <p>The <code>[name]</code>, <code>[id]</code>, <code>[fullhash]</code> and <code>[chunkhash]</code> substitutions from <a href="#outputfilename"><code>output.filename</code></a> can be used. In addition to those, you can use substitutions listed under Filename-level in <a href="/configuration/output/#template-strings">Template strings</a>.</p> <h2 id="outputsourceprefix"><code>output.sourcePrefix</code><a href="#outputsourceprefix" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string = \'\'</code></p> <p>Change the prefix for each line in the output bundles.</p> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    sourcePrefix<span class="token operator">:</span> <span class="token string">\'\\t\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <blockquote class="tip"> <p>Using some kind of indentation makes bundles look prettier, but will cause issues with multi-line strings.</p> </blockquote> <blockquote class="tip"> <p>Typically you don\'t need to change <code>output.sourcePrefix</code>.</p> </blockquote> <h2 id="outputstrictmoduleexceptionhandling"><code>output.strictModuleExceptionHandling</code><a href="#outputstrictmoduleexceptionhandling" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>Tell webpack to remove a module from the module instance cache (<code>require.cache</code>) if it throws an exception when it is <code>require</code>d.</p> <p>It defaults to <code>false</code> for performance reasons.</p> <p>When set to <code>false</code>, the module is not removed from cache, which results in the exception getting thrown only on the first <code>require</code> call (making it incompatible with node.js).</p> <p>For instance, consider <code>module.js</code>:</p> <pre><code class="hljs language-javascript"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'error\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>With <code>strictModuleExceptionHandling</code> set to <code>false</code>, only the first <code>require</code> throws an exception:</p> <pre><code class="hljs language-javascript"><span class="token comment">// with strictModuleExceptionHandling = false</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- throws</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- doesn\'t throw</span></code></pre> <p>Instead, with <code>strictModuleExceptionHandling</code> set to <code>true</code>, all <code>require</code>s of this module throw an exception:</p> <pre><code class="hljs language-javascript"><span class="token comment">// with strictModuleExceptionHandling = true</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- throws</span>\n<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'module\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#x3C;- also throws</span></code></pre> <h2 id="outputumdnameddefine"><code>output.umdNamedDefine</code><a href="#outputumdnameddefine" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean</code></p> <p>When using <code>libraryTarget: "umd"</code>, setting <code>output.umdNamedDefine</code> to <code>true</code> will name the AMD module of the UMD build. Otherwise an anonymous <code>define</code> is used.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    umdNamedDefine<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputworkerchunkloading"><code>output.workerChunkLoading</code><a href="#outputworkerchunkloading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>string: \'require\' | \'import-scripts\' | \'async-node\' | \'import\' | \'universal\'</code> <code>boolean: false</code></p> <p>The new option <code>workerChunkLoading</code> controls the chunk loading of workers.</p> <blockquote class="tip"> <p>The default value of this option is depending on the <code>target</code> setting. For more details, search for <code>"workerChunkLoading"</code>: <a href="https://github.com/webpack/webpack/blob/master/lib/config/defaults.js">in the webpack defaults</a>.</p> </blockquote> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    workerChunkLoading<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputenabledlibrarytypes"><code>output.enabledLibraryTypes</code><a href="#outputenabledlibrarytypes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[string]</code></p> <p>List of library types enabled for use by entry points.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    enabledLibraryTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'module\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputfutureemitassets"><code>output.futureEmitAssets</code><a href="#outputfutureemitassets" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code></p> <p>Tells webpack to use the future version of asset emitting logic, which allows freeing memory of assets after emitting. It could break plugins which assume that assets are still readable after they were emitted.</p> <blockquote class="warning"> <p><code>output.futureEmitAssets</code> option will be removed in webpack v5.0.0 and this behaviour will become the new default.</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    futureEmitAssets<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputenvironment"><code>output.environment</code><a href="#outputenvironment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>Tell webpack what kind of ES-features may be used in the generated runtime-code.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    environment<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The environment supports arrow functions (\'() => { ... }\').</span>\n      arrowFunction<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports BigInt as literal (123n).</span>\n      bigIntLiteral<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports const and let for variable declarations.</span>\n      <span class="token keyword">const</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports destructuring (\'{ a, b } = obj\').</span>\n      destructuring<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports an async import() function to import EcmaScript modules.</span>\n      dynamicImport<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports \'for of\' iteration (\'for (const x of array) { ... }\').</span>\n      forOf<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      <span class="token comment">// The environment supports ECMAScript Module syntax to import ECMAScript modules (import ... from \'...\').</span>\n      module<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputcomparebeforeemit"><code>output.compareBeforeEmit</code><a href="#outputcomparebeforeemit" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Tells webpack to check if to be emitted file already exists and has the same content before writing to the output file system.</p> <blockquote class="warning"> <p>webpack will not write output file when file already exists on disk with the same content.</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    compareBeforeEmit<span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputwasmloading"><code>output.wasmLoading</code><a href="#outputwasmloading" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = false</code> <code>string</code></p> <p>Option to set the method of loading WebAssembly Modules. Methods included by default are <code>\'fetch\'</code> (web/WebWorker), <code>\'async-node\'</code> (Node.js), but others might be added by plugins.</p> <p>The default value can be affected by different <a href="/configuration/target/"><code>target</code></a>:</p> <ul> <li>Defaults to <code>\'fetch\'</code> if <a href="/configuration/target/"><code>target</code></a> is set to <code>\'web\'</code>, <code>\'webworker\'</code>, <code>\'electron-renderer\'</code> or <code>\'node-webkit\'</code>.</li> <li>Defaults to <code>\'async-node\'</code> if <a href="/configuration/target/"><code>target</code></a> is set to <code>\'node\'</code>, <code>\'async-node\'</code>, <code>\'electron-main\'</code> or <code>\'electron-preload\'</code>.</li> </ul> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    wasmLoading<span class="token operator">:</span> <span class="token string">\'fetch\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputenabledwasmloadingtypes"><code>output.enabledWasmLoadingTypes</code><a href="#outputenabledwasmloadingtypes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>[string]</code></p> <p>List of wasm loading types enabled for use by entry points.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    enabledWasmLoadingTypes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'fetch\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputiife"><code>output.iife</code><a href="#outputiife" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Tells webpack to add <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE">IIFE</a> wrapper around emitted code.</p> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    iife<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h2 id="outputmodule"><code>output.module</code><a href="#outputmodule" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>boolean = true</code></p> <p>Allow outputting JavaScript files as module type. It sets <code>output.iife</code> to <code>false</code>, <code>output.libraryTarget</code> to <code>\'module\'</code>, <code>output.scriptType</code> to <code>\'module\'</code> and <code>terserOptions.module</code> to <code>true</code></p> <blockquote class="warning"> <p><code>output.module</code> is an experimental feature and can be enabled by setting <a href="/configuration/experiments/#experiments"><code>experiments.outputModule</code></a> to <code>true</code>.</p> </blockquote> <pre><code class="hljs language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    module<span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> '}}]);